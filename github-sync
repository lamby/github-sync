#!/usr/bin/env python3
#
# github-sync
#
# Copyright (C) 2017 Chris Lamb <chris@chris-lamb.co.uk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import logging
import requests
import subprocess

from xdg import BaseDirectory
from configparser import SafeConfigParser


class GithubSync(object):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.load_config()
        self.setup_logging()

    def load_config(self):
        self.config = SafeConfigParser()
        self.config.read(
            os.path.join(BaseDirectory.xdg_config_home, 'github-sync.ini')
        )

        assert 'MAIN' in self.config

    def setup_logging(self):
        self.log = logging.getLogger()
        self.log.setLevel({
            0: logging.WARNING,
            1: logging.INFO,
            2: logging.DEBUG,
        }[1])

        handler = logging.StreamHandler(sys.stderr)
        handler.setFormatter(
            logging.Formatter('%(asctime).19s %(levelname).1s %(message)s')
        )
        self.log.addHandler(handler)

    def main(self):
        for x in self.config.sections():
            if x == 'MAIN':
                continue
            self.sync_project(x)

        return 0

    def sync_project(self, name):
        self.log.info("Syncing %s", name)

        org = self.config['MAIN']['Organisation']
        project = self.config[name]

        data = {
            'name': name,
            'homepage': project['homepage'],
            'description': "Official mirror of {}".format(project['source']),
            'has_issues': False,
            'has_wiki': False,
            'has_downloads': False,
        }

        r = requests.patch(
            'https://api.github.com/repos/{}/{}'.format(org, name),
            json=data,
            headers=self.get_headers(),
        )

        if r.status_code != 200:
            r = requests.post(
                'https://api.github.com/orgs/{}/repos'.format(org),
                json=data,
                headers=self.get_headers(),
            )

            r.raise_for_status()

        cwd = os.path.join(BaseDirectory.xdg_cache_home, 'github-sync', name)
        repo = r.json()

        def git(*args, **kwargs):
            kwargs['args'] = ('git',) + args
            kwargs['cwd'] = kwargs.pop('cwd', cwd)

            self.log.debug("git %s", ' '.join(args))
            return subprocess.check_call(**kwargs)

        if os.path.exists(cwd):
            git('fetch')
        else:
            git('clone', project['source'], cwd, cwd=None)

        git('remote', 'set-url', 'origin', repo['ssh_url'])
        git('push', '--all')
        git('push', '--tags')

    def get_headers(self):
        return {
            'Accept': 'application/vnd.github.inertia-preview+json',
            'Authorization': 'token %s' % self.config['MAIN']['Token']
        }

if __name__ == '__main__':
    sys.exit(GithubSync().main())
