#!/usr/bin/env python3
#
# github-sync
#
# Copyright (C) 2017 Chris Lamb <chris@chris-lamb.co.uk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import logging
import eventlet
import requests
import subprocess

from eventlet import wsgi
from configparser import SafeConfigParser

class GithubSync(object):
    def __init__(self):
        self.pool = eventlet.GreenPool(1000)

    def setup_logging(self):
        self.log = logging.getLogger()

        if 'GITHUB_SYNC_DEBUG' in os.environ:
            self.log.setLevel(logging.DEBUG)

        handler = logging.StreamHandler(sys.stderr)
        handler.setFormatter(
            logging.Formatter('%(asctime).19s %(levelname).1s %(message)s')
        )
        self.log.addHandler(handler)

    def load_config(self, config_file):
        self.log.info("Loading configuration from %s", config_file)
        self.config = SafeConfigParser()
        self.config.read(config_file)

        if 'General' not in self.config:
            raise ValueError("No valid configuration file specified")

        self.log.debug(
            "Loaded configuration: %d project(s)",
            len(self.config.sections()) - 1,
        )

    def main(self, config_file):
        self.setup_logging()

        eventlet.monkey_patch()

        self.load_config(config_file)
        self.start_server()

        self.log.info("Server ready")

        try:
            self.pool.waitall()
        except (SystemExit, KeyboardInterrupt):
            pass

        return 0

    def start_server(self):
        wsgi_socket = eventlet.listen((
            self.config['General']['ListenAddress'],
            self.config['General'].getint('ListenPort'),
        ))

        self.pool.spawn_n(wsgi.server, wsgi_socket, self.handle_wsgi)

    def handle_wsgi(self, env, start_response):
        if env['REQUEST_METHOD'] != 'POST':
            start_response("405 Method Not Allowed", [])
            return []

        if env['PATH_INFO'] == '/':
            for x in self.config.sections():
                if '/' in x:
                    self.pool.spawn_n(self.sync_project, x)
        else:
            x = env['PATH_INFO'][1:]
            if x not in self.config:
                start_response("404 File Not Found", [])
                return []
            self.pool.spawn_n(self.sync_project, x)

        start_response("202 Accepted", [])
        return []

    def sync_project(self, name):
        self.log.info("Syncing %s", name)

        project = self.config[name]
        org, repo_name = name.split('/', 2)

        data = {
            'name': repo_name,
            'homepage': project['homepage'],
            'description': "Official mirror of {}".format(project['source']),
            'has_issues': False,
            'has_wiki': False,
            'has_downloads': False,
        }

        self.log.debug("Updating metadata")
        r = requests.patch(
            'https://api.github.com/repos/{}'.format(name),
            json=data,
            headers=self.get_headers(),
        )

        if r.status_code != 200:
            self.log.info("Creating repo")
            r = requests.post(
                'https://api.github.com/orgs/{}/repos'.format(org),
                json=data,
                headers=self.get_headers(),
            )

            r.raise_for_status()

        cwd = os.path.join(self.config['General']['CacheDir'], name)
        repo = r.json()

        def git(*args, **kwargs):
            kwargs['args'] = ('git',) + args
            kwargs['cwd'] = kwargs.pop('cwd', cwd)

            self.log.debug("git %s", ' '.join(args))
            return subprocess.check_call(**kwargs)

        if not os.path.exists(cwd):
            git('clone', '--mirror', project['source'], cwd, cwd=None)
            git('remote', 'add', 'github', repo['ssh_url'])

        git('fetch', 'origin', '--prune')

        git('remote', 'set-url', 'github', repo['ssh_url'])
        git('push', 'github', '--force')

    def get_headers(self):
        return {
            'Accept': 'application/vnd.github.inertia-preview+json',
            'Authorization': 'token %s' % self.config['General']['GithubToken']
        }

if __name__ == '__main__':
    try:
        sys.exit(GithubSync().main(*sys.argv[1:]))
    except KeyboardInterrupt:
        sys.exit(2)
